<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		<aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- Properties 파일에 설정된 프로퍼티들을 이용하여 DataSource를 설정 -->
	<!-- 이 설정을 해줌으로써 applicationContext.xml 파일에 dataSource property value 값이 직접안들어가고 설정 파일에 따로 작성 할 수 있음 -->
	<context:property-placeholder location="classpath:config/database.properties"/>
	
	<!-- DataSource 설정 -->
	<!-- BasicDataSource 객체는 연결에 필요한 property들을 Setter 인젝션으로 설정해주면 됨. 그리고 BasicDataSource 객체가 삭제되기 전에 연결을 해제하기 위해 close 메소드를 destroy-method 속성으로 지정 -->
	<!-- xml에서 &를 참조자로 인식하기 때문에 url value 값에서 '&' 이게 사용되면 Error 발생 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- DAO 클래스에서 JdbcTemplate 객체를 얻는 방법 -> JdbcTemplate 클래스를 <bean>으로 등록하고 의존성 주입으로 처리 -->
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 보통 AOP 관련 설정에 사용한 모든 어드바이스 클래스는 우리가 직접 구현하지만 트랜잭션 관리 기능의 어드바이스는 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 생성한다. -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- get으로 시작하는 모든 메소드는 읽기전용으로 처리되어 트랜잭션 관리 대상에서 제외하고 나머지 메소드들은 트랜잭션 관리에 포함한 것 -->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- <aop:advisor>와 <aop:aspect>는 같은 기능의 엘리먼트. 즉 어드바이저 역시 포인트컷과 어드바이스의 결합이라는 측면에서 같으며 
	다음처럼 txPointcut으로 지정한 메소드가 호출될 때 txAdvice로 등록한 어드바이스가 동작하여 트랜잭션을 관리하도록 설정 -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))"/>
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml"></property>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	
	<!-- NaverLoginBO Class 에 대한 Bean 설정 추가 -->
	<bean id="naverLoginBO" class="com.springbook.view.user.NaverLoginBO"></bean>
</beans>
